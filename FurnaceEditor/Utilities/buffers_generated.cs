// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Furnace.Buffers
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public enum LogType : sbyte
{
  None = 0,
  Info = 1,
  Warn = 2,
  Error = 4,
};

public enum AnyMessage : byte
{
  NONE = 0,
  Log = 1,
};



static public class AnyMessageVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, byte typeId, uint tablePos)
  {
    bool result = true;
    switch((AnyMessage)typeId)
    {
      case AnyMessage.Log:
        result = Furnace.Buffers.LogVerify.Verify(verifier, tablePos);
        break;
      default: result = true;
        break;
    }
    return result;
  }
}

public struct Log : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Log GetRootAsLog(ByteBuffer _bb) { return GetRootAsLog(_bb, new Log()); }
  public static Log GetRootAsLog(ByteBuffer _bb, Log obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Log __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Furnace.Buffers.LogType LogType { get { int o = __p.__offset(4); return o != 0 ? (Furnace.Buffers.LogType)__p.bb.GetSbyte(o + __p.bb_pos) : Furnace.Buffers.LogType.None; } }
  public string Text { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTextBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTextArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<Furnace.Buffers.Log> CreateLog(FlatBufferBuilder builder,
      Furnace.Buffers.LogType log_type = Furnace.Buffers.LogType.None,
      StringOffset textOffset = default(StringOffset)) {
    builder.StartTable(2);
    Log.AddText(builder, textOffset);
    Log.AddLogType(builder, log_type);
    return Log.EndLog(builder);
  }

  public static void StartLog(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddLogType(FlatBufferBuilder builder, Furnace.Buffers.LogType logType) { builder.AddSbyte(0, (sbyte)logType, 0); }
  public static void AddText(FlatBufferBuilder builder, StringOffset textOffset) { builder.AddOffset(1, textOffset.Value, 0); }
  public static Offset<Furnace.Buffers.Log> EndLog(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Furnace.Buffers.Log>(o);
  }
}


static public class LogVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*LogType*/, 1 /*Furnace.Buffers.LogType*/, 1, false)
      && verifier.VerifyString(tablePos, 6 /*Text*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct MessageWrapper : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MessageWrapper GetRootAsMessageWrapper(ByteBuffer _bb) { return GetRootAsMessageWrapper(_bb, new MessageWrapper()); }
  public static MessageWrapper GetRootAsMessageWrapper(ByteBuffer _bb, MessageWrapper obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyMessageWrapper(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, MessageWrapperVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MessageWrapper __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Furnace.Buffers.AnyMessage MessageType { get { int o = __p.__offset(4); return o != 0 ? (Furnace.Buffers.AnyMessage)__p.bb.Get(o + __p.bb_pos) : Furnace.Buffers.AnyMessage.NONE; } }
  public TTable? Message<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public Furnace.Buffers.Log MessageAsLog() { return Message<Furnace.Buffers.Log>().Value; }

  public static Offset<Furnace.Buffers.MessageWrapper> CreateMessageWrapper(FlatBufferBuilder builder,
      Furnace.Buffers.AnyMessage message_type = Furnace.Buffers.AnyMessage.NONE,
      int messageOffset = 0) {
    builder.StartTable(2);
    MessageWrapper.AddMessage(builder, messageOffset);
    MessageWrapper.AddMessageType(builder, message_type);
    return MessageWrapper.EndMessageWrapper(builder);
  }

  public static void StartMessageWrapper(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMessageType(FlatBufferBuilder builder, Furnace.Buffers.AnyMessage messageType) { builder.AddByte(0, (byte)messageType, 0); }
  public static void AddMessage(FlatBufferBuilder builder, int messageOffset) { builder.AddOffset(1, messageOffset, 0); }
  public static Offset<Furnace.Buffers.MessageWrapper> EndMessageWrapper(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Furnace.Buffers.MessageWrapper>(o);
  }
  public static void FinishMessageWrapperBuffer(FlatBufferBuilder builder, Offset<Furnace.Buffers.MessageWrapper> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMessageWrapperBuffer(FlatBufferBuilder builder, Offset<Furnace.Buffers.MessageWrapper> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class MessageWrapperVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*MessageType*/, 1 /*Furnace.Buffers.AnyMessage*/, 1, false)
      && verifier.VerifyUnion(tablePos, 4, 6 /*Message*/, Furnace.Buffers.AnyMessageVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
