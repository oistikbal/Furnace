// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BUFFERS_FURNACE_BUFFERS_H_
#define FLATBUFFERS_GENERATED_BUFFERS_FURNACE_BUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace Furnace {
namespace Buffers {

struct Log;
struct LogBuilder;

struct MessageWrapper;
struct MessageWrapperBuilder;

enum LogType : int8_t {
  LogType_None = 0,
  LogType_Info = 1,
  LogType_Warn = 2,
  LogType_Error = 4,
  LogType_MIN = LogType_None,
  LogType_MAX = LogType_Error
};

inline const LogType (&EnumValuesLogType())[4] {
  static const LogType values[] = {
    LogType_None,
    LogType_Info,
    LogType_Warn,
    LogType_Error
  };
  return values;
}

inline const char * const *EnumNamesLogType() {
  static const char * const names[6] = {
    "None",
    "Info",
    "Warn",
    "",
    "Error",
    nullptr
  };
  return names;
}

inline const char *EnumNameLogType(LogType e) {
  if (::flatbuffers::IsOutRange(e, LogType_None, LogType_Error)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLogType()[index];
}

enum AnyMessage : uint8_t {
  AnyMessage_NONE = 0,
  AnyMessage_Log = 1,
  AnyMessage_MIN = AnyMessage_NONE,
  AnyMessage_MAX = AnyMessage_Log
};

inline const AnyMessage (&EnumValuesAnyMessage())[2] {
  static const AnyMessage values[] = {
    AnyMessage_NONE,
    AnyMessage_Log
  };
  return values;
}

inline const char * const *EnumNamesAnyMessage() {
  static const char * const names[3] = {
    "NONE",
    "Log",
    nullptr
  };
  return names;
}

inline const char *EnumNameAnyMessage(AnyMessage e) {
  if (::flatbuffers::IsOutRange(e, AnyMessage_NONE, AnyMessage_Log)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAnyMessage()[index];
}

template<typename T> struct AnyMessageTraits {
  static const AnyMessage enum_value = AnyMessage_NONE;
};

template<> struct AnyMessageTraits<Furnace::Buffers::Log> {
  static const AnyMessage enum_value = AnyMessage_Log;
};

bool VerifyAnyMessage(::flatbuffers::Verifier &verifier, const void *obj, AnyMessage type);
bool VerifyAnyMessageVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct Log FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LogBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOG_TYPE = 4,
    VT_TEXT = 6
  };
  Furnace::Buffers::LogType log_type() const {
    return static_cast<Furnace::Buffers::LogType>(GetField<int8_t>(VT_LOG_TYPE, 0));
  }
  const ::flatbuffers::String *text() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_LOG_TYPE, 1) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
};

struct LogBuilder {
  typedef Log Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_log_type(Furnace::Buffers::LogType log_type) {
    fbb_.AddElement<int8_t>(Log::VT_LOG_TYPE, static_cast<int8_t>(log_type), 0);
  }
  void add_text(::flatbuffers::Offset<::flatbuffers::String> text) {
    fbb_.AddOffset(Log::VT_TEXT, text);
  }
  explicit LogBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Log> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Log>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Log> CreateLog(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Furnace::Buffers::LogType log_type = Furnace::Buffers::LogType_None,
    ::flatbuffers::Offset<::flatbuffers::String> text = 0) {
  LogBuilder builder_(_fbb);
  builder_.add_text(text);
  builder_.add_log_type(log_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Log> CreateLogDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Furnace::Buffers::LogType log_type = Furnace::Buffers::LogType_None,
    const char *text = nullptr) {
  auto text__ = text ? _fbb.CreateString(text) : 0;
  return Furnace::Buffers::CreateLog(
      _fbb,
      log_type,
      text__);
}

struct MessageWrapper FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageWrapperBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_TYPE = 4,
    VT_MESSAGE = 6
  };
  Furnace::Buffers::AnyMessage message_type() const {
    return static_cast<Furnace::Buffers::AnyMessage>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0));
  }
  const void *message() const {
    return GetPointer<const void *>(VT_MESSAGE);
  }
  template<typename T> const T *message_as() const;
  const Furnace::Buffers::Log *message_as_Log() const {
    return message_type() == Furnace::Buffers::AnyMessage_Log ? static_cast<const Furnace::Buffers::Log *>(message()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           VerifyAnyMessage(verifier, message(), message_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Furnace::Buffers::Log *MessageWrapper::message_as<Furnace::Buffers::Log>() const {
  return message_as_Log();
}

struct MessageWrapperBuilder {
  typedef MessageWrapper Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message_type(Furnace::Buffers::AnyMessage message_type) {
    fbb_.AddElement<uint8_t>(MessageWrapper::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0);
  }
  void add_message(::flatbuffers::Offset<void> message) {
    fbb_.AddOffset(MessageWrapper::VT_MESSAGE, message);
  }
  explicit MessageWrapperBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MessageWrapper> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MessageWrapper>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MessageWrapper> CreateMessageWrapper(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Furnace::Buffers::AnyMessage message_type = Furnace::Buffers::AnyMessage_NONE,
    ::flatbuffers::Offset<void> message = 0) {
  MessageWrapperBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_message_type(message_type);
  return builder_.Finish();
}

inline bool VerifyAnyMessage(::flatbuffers::Verifier &verifier, const void *obj, AnyMessage type) {
  switch (type) {
    case AnyMessage_NONE: {
      return true;
    }
    case AnyMessage_Log: {
      auto ptr = reinterpret_cast<const Furnace::Buffers::Log *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyAnyMessageVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyAnyMessage(
        verifier,  values->Get(i), types->GetEnum<AnyMessage>(i))) {
      return false;
    }
  }
  return true;
}

inline const Furnace::Buffers::MessageWrapper *GetMessageWrapper(const void *buf) {
  return ::flatbuffers::GetRoot<Furnace::Buffers::MessageWrapper>(buf);
}

inline const Furnace::Buffers::MessageWrapper *GetSizePrefixedMessageWrapper(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Furnace::Buffers::MessageWrapper>(buf);
}

inline bool VerifyMessageWrapperBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Furnace::Buffers::MessageWrapper>(nullptr);
}

inline bool VerifySizePrefixedMessageWrapperBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Furnace::Buffers::MessageWrapper>(nullptr);
}

inline void FinishMessageWrapperBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Furnace::Buffers::MessageWrapper> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageWrapperBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Furnace::Buffers::MessageWrapper> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Buffers
}  // namespace Furnace

#endif  // FLATBUFFERS_GENERATED_BUFFERS_FURNACE_BUFFERS_H_
